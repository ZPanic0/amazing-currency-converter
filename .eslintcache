[{"C:\\dev\\amazing-currency-converter\\src\\index.js":"1","C:\\dev\\amazing-currency-converter\\src\\App.js":"2","C:\\dev\\amazing-currency-converter\\src\\reportWebVitals.js":"3","C:\\dev\\amazing-currency-converter\\src\\components\\CurrencySelector.js":"4","C:\\dev\\amazing-currency-converter\\src\\api\\getAvailableCurrencies.js":"5","C:\\dev\\amazing-currency-converter\\src\\api\\getCurrencyRatio.js":"6","C:\\dev\\amazing-currency-converter\\src\\components\\CurrencyInput.js":"7","C:\\dev\\amazing-currency-converter\\src\\components\\ExchangeRateDisplay.js":"8","C:\\dev\\amazing-currency-converter\\src\\components\\LoadingDisplay.js":"9"},{"size":478,"mtime":1610914779236,"results":"10","hashOfConfig":"11"},{"size":3449,"mtime":1610917904475,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":499162500000,"results":"13","hashOfConfig":"11"},{"size":665,"mtime":1610909102170,"results":"14","hashOfConfig":"11"},{"size":4334,"mtime":1610858605122,"results":"15","hashOfConfig":"11"},{"size":846,"mtime":1610914521392,"results":"16","hashOfConfig":"11"},{"size":410,"mtime":1610917480648,"results":"17","hashOfConfig":"11"},{"size":195,"mtime":1610914319498,"results":"18","hashOfConfig":"11"},{"size":304,"mtime":1610915796923,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"q2u3sz",{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"22"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"C:\\dev\\amazing-currency-converter\\src\\index.js",[],["41","42"],"C:\\dev\\amazing-currency-converter\\src\\App.js",["43"],"import { useEffect, useState } from 'react'\nimport { CurrencySelector } from './components/CurrencySelector'\nimport { getAvailableCurrencies } from './api/getAvailableCurrencies'\nimport { Button, CircularProgress, Grid, makeStyles, Typography } from '@material-ui/core'\nimport { getCurrencyRatio } from './api/getCurrencyRatio'\nimport { CurrencyInput } from './components/CurrencyInput'\nimport { ExchangeRateDisplay } from './components/ExchangeRateDisplay'\nimport { LoadingDisplay } from './components/LoadingDisplay'\n\nconst useStyles = makeStyles(() => ({\n  container: { minHeight: '100vh' },\n  loadingContainer: { minHeight: '64px' }\n}))\n\nconst App = () => {\n  const classes = useStyles()\n  const [loading, setLoading] = useState(true)\n  const [availableCurrencies, setAvailableCurrencies] = useState(null)\n  const [inputValue, setInputValue] = useState(1)\n  const [fromKey, setFromKey] = useState('USD')\n  const [toKey, setToKey] = useState('CAD')\n  const [exchangeRate, setExchangeRate] = useState('')\n  const [convertedValue, setConvertedValue] = useState('Converted ðŸ’° will appear here.')\n\n  useEffect(() => {\n    (async () => {\n      setLoading(true)\n      setExchangeRate(await getCurrencyRatio(fromKey, toKey))\n      setLoading(false)\n    })()\n  }, [fromKey, toKey])\n\n  useEffect(() => {\n    (async () => {\n      const newCurrencies = await getAvailableCurrencies()\n      const conversionRate = await getCurrencyRatio(fromKey, toKey)\n\n      setAvailableCurrencies(newCurrencies)\n      setExchangeRate(conversionRate)\n      setLoading(false)\n    })()\n  }, [])\n\n  return <Grid container className={classes.container} direction='column' alignItems='center' justify='center' spacing={2}>\n    <Grid item xs={12}>\n      <Typography variant='h4'>Amazing Currency Converter</Typography>\n    </Grid>\n    {\n      availableCurrencies\n        ? <>\n          <Grid item xs={12}>\n            <Grid container spacing={3}>\n              <Grid item>\n                <CurrencyInput\n                  value={inputValue}\n                  onChange={setInputValue}\n                />\n              </Grid>\n              <Grid item>\n                <CurrencySelector\n                  helperText='From'\n                  selectedKey={fromKey}\n                  currencies={availableCurrencies}\n                  onChange={setFromKey}\n                />\n              </Grid>\n              <Grid item>\n                <CurrencySelector\n                  helperText='To'\n                  selectedKey={toKey}\n                  currencies={availableCurrencies}\n                  onChange={setToKey}\n                />\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid item xs={12}>\n            <ExchangeRateDisplay exchangeRate={exchangeRate} />\n          </Grid>\n          <Grid item xs={12}>\n            <Button disabled={loading} variant='contained' onClick={() => {\n              const result = Math.round(inputValue * exchangeRate * 100) / 100\n\n              setConvertedValue(`${inputValue} ${fromKey} is ${result} in ${toKey}`)\n            }}>\n              Exchange my money now!\n        </Button>\n          </Grid>\n          <Grid item xs={12} className={classes.loadingContainer}>\n            {loading && <CircularProgress />}\n          </Grid>\n          <Grid item xs={12}>\n            <Typography>{convertedValue}</Typography>\n          </Grid>\n        </>\n        : <LoadingDisplay />\n    }\n  </Grid>\n}\n\nexport default App\n","C:\\dev\\amazing-currency-converter\\src\\reportWebVitals.js",[],"C:\\dev\\amazing-currency-converter\\src\\components\\CurrencySelector.js",[],"C:\\dev\\amazing-currency-converter\\src\\api\\getAvailableCurrencies.js",[],["44","45"],"C:\\dev\\amazing-currency-converter\\src\\api\\getCurrencyRatio.js",[],"C:\\dev\\amazing-currency-converter\\src\\components\\CurrencyInput.js",[],"C:\\dev\\amazing-currency-converter\\src\\components\\ExchangeRateDisplay.js",[],"C:\\dev\\amazing-currency-converter\\src\\components\\LoadingDisplay.js",[],{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","severity":1,"message":"51","line":42,"column":6,"nodeType":"52","endLine":42,"endColumn":8,"suggestions":"53"},{"ruleId":"46","replacedBy":"54"},{"ruleId":"48","replacedBy":"55"},"no-native-reassign",["56"],"no-negated-in-lhs",["57"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'fromKey' and 'toKey'. Either include them or remove the dependency array.","ArrayExpression",["58"],["56"],["57"],"no-global-assign","no-unsafe-negation",{"desc":"59","fix":"60"},"Update the dependencies array to be: [fromKey, toKey]",{"range":"61","text":"62"},[1565,1567],"[fromKey, toKey]"]